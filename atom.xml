<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Star</title>
  <icon>https://www.gravatar.com/avatar/e8f0aba4417ec70543e5957ca2a6e4fe</icon>
  <subtitle>手可摘星辰</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-19T23:00:05.259Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jerry Niu</name>
    <email>15835139079@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《On-Java8》6-封装</title>
    <link href="http://yoursite.com/2020/05/09/%E3%80%8AOn-Java8%E3%80%8B6-%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2020/05/09/%E3%80%8AOn-Java8%E3%80%8B6-%E5%B0%81%E8%A3%85/</id>
    <published>2020-05-09T08:26:46.000Z</published>
    <updated>2020-05-19T23:00:05.259Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;类库的使用者必须依赖他们所使用的那部分类库，并且知道如果使用了类库的新版本，不需要改写代码。另一方面，类库的开发者必须有修改和改进类库的自由，并保证客户代码不会受这些改动影响。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="On Java8读书笔记" scheme="http://yoursite.com/tags/On-Java8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据库连接池</title>
    <link href="http://yoursite.com/2020/05/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://yoursite.com/2020/05/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</id>
    <published>2020-05-09T02:09:12.000Z</published>
    <updated>2020-05-09T07:01:41.460Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么要使用连接池&quot;&gt;&lt;a href=&quot;#为什么要使用连接池&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用连接池&quot;&gt;&lt;/a&gt;为什么要使用连接池&lt;/h2&gt;&lt;p&gt;数据库连接是一种关键的有限的昂贵资源。一个数据库连接对象均对应一个物理数据库连接，每次操作都打开一个物理连接，使用完关闭连接，这样造成系统性能低下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mysql" scheme="http://yoursite.com/categories/Mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>《On-Java8》5-初始化和清理</title>
    <link href="http://yoursite.com/2020/04/30/%E3%80%8AOn-Java8%E3%80%8B5-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%B8%85%E7%90%86/"/>
    <id>http://yoursite.com/2020/04/30/%E3%80%8AOn-Java8%E3%80%8B5-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%B8%85%E7%90%86/</id>
    <published>2020-04-30T07:08:17.000Z</published>
    <updated>2020-05-09T08:32:05.965Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;利用构造器保证初始化&quot;&gt;&lt;a href=&quot;#利用构造器保证初始化&quot; class=&quot;headerlink&quot; title=&quot;利用构造器保证初始化&quot;&gt;&lt;/a&gt;利用构造器保证初始化&lt;/h2&gt;&lt;p&gt;在 Java 中，类的设计者通过构造器保证每个对象的初始化。如果一个类有构造器，那么 Java 会在用户使用对象之前（即对象刚创建完成）自动调用对象的构造器方法，从而保证初始化。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="On Java8读书笔记" scheme="http://yoursite.com/tags/On-Java8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《On-Java8》4-控制流</title>
    <link href="http://yoursite.com/2020/04/30/%E3%80%8AOn-Java8%E3%80%8B4-%E6%8E%A7%E5%88%B6%E6%B5%81/"/>
    <id>http://yoursite.com/2020/04/30/%E3%80%8AOn-Java8%E3%80%8B4-%E6%8E%A7%E5%88%B6%E6%B5%81/</id>
    <published>2020-04-30T06:39:20.000Z</published>
    <updated>2020-04-30T07:07:24.489Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;true和false&quot;&gt;&lt;a href=&quot;#true和false&quot; class=&quot;headerlink&quot; title=&quot;true和false&quot;&gt;&lt;/a&gt;true和false&lt;/h2&gt;&lt;p&gt;如果想在布尔测试中使用一个非布尔值，那么首先需要使用条件表达式来产生 boolean 类型的结果，例如 if(a != 0)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="On Java8读书笔记" scheme="http://yoursite.com/tags/On-Java8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《On-Java8》3-运算符</title>
    <link href="http://yoursite.com/2020/04/27/%E3%80%8AOn-Java8%E3%80%8B3-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2020/04/27/%E3%80%8AOn-Java8%E3%80%8B3-%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-04-27T07:04:07.000Z</published>
    <updated>2020-04-27T10:19:44.536Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;赋值&quot;&gt;&lt;a href=&quot;#赋值&quot; class=&quot;headerlink&quot; title=&quot;赋值&quot;&gt;&lt;/a&gt;赋值&lt;/h2&gt;&lt;p&gt;运算符的赋值是由符号 = 完成的。获取 = 右边的值赋给左边的变量。右边可以是任何常量、变量或者可产生一个返回值的表达式。但左&lt;br&gt;边必须是一个明确的、已命名的变量。&lt;br&gt;基本类型的赋值是直接的(此后对原值的修改不会影响到被赋值的基本类型)，而不像对象，赋予的只是其内存的引用(操作的还是同一个&lt;br&gt;对象)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="On Java8读书笔记" scheme="http://yoursite.com/tags/On-Java8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《On-Java8》2-万物皆对象</title>
    <link href="http://yoursite.com/2020/04/22/%E3%80%8AOn-Java8%E3%80%8B2-%E4%B8%87%E7%89%A9%E7%9A%86%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2020/04/22/%E3%80%8AOn-Java8%E3%80%8B2-%E4%B8%87%E7%89%A9%E7%9A%86%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-04-22T07:16:21.000Z</published>
    <updated>2020-04-22T09:06:38.809Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;对象操纵&quot;&gt;&lt;a href=&quot;#对象操纵&quot; class=&quot;headerlink&quot; title=&quot;对象操纵&quot;&gt;&lt;/a&gt;对象操纵&lt;/h2&gt;&lt;p&gt;Java利用万物皆对象的思想和单一一致的语法方式来简化问题。虽万物皆可为对象，但我们所操纵的标识符实际上只是对对象的引用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="On Java8读书笔记" scheme="http://yoursite.com/tags/On-Java8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《On Java8》1-对象的概念</title>
    <link href="http://yoursite.com/2020/04/08/%E3%80%8AOn-Java8%E3%80%8B1-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2020/04/08/%E3%80%8AOn-Java8%E3%80%8B1-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A6%82%E5%BF%B5/</id>
    <published>2020-04-08T02:55:59.000Z</published>
    <updated>2020-04-22T09:36:36.086Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;面向对象编程(Object-Oriented Programming OOP)是一种编程思维方式和编码架构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="On Java8读书笔记" scheme="http://yoursite.com/tags/On-Java8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java垃圾回收</title>
    <link href="http://yoursite.com/2020/04/01/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>http://yoursite.com/2020/04/01/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</id>
    <published>2020-04-01T10:03:14.000Z</published>
    <updated>2020-04-02T09:05:30.116Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;垃圾回收是java针对堆中垃圾进行的清理，有效释放内存的一种手段。&lt;/p&gt;
&lt;h2 id=&quot;什么是垃圾回收&quot;&gt;&lt;a href=&quot;#什么是垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;什么是垃圾回收&quot;&gt;&lt;/a&gt;什么是垃圾回收&lt;/h2&gt;&lt;p&gt;垃圾回收（Garbage Collection,GC)就是释放垃圾占用的空间，防止内存泄漏，可以有效使用内存，对内存堆中已经死亡或者长时间未使用的对象进行清除。&lt;/p&gt;
&lt;p&gt;Java语言之前，C或者C++的程序创建对象需要不断开辟空间，当使用完成后需要释放，既要写构造函数，又要写析构函数，很多时候都在重复的 allocated，然后不停的析构。于是，有人就提出，能不能写一段程序实现这块功能，每次创建，释放控件的时候复用这段代码，而无需重复的书写呢？&lt;/p&gt;
&lt;p&gt;1960年，基于 MIT 的 Lisp 首先提出了垃圾回收的概念，而这时 Java 还没有出世呢！所以实际上 GC 并不是Java的专利，GC 的历史远远大于 Java 的历史！&lt;/p&gt;
    
    </summary>
    
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装mysql数据库</title>
    <link href="http://yoursite.com/2020/01/08/Docker%E5%AE%89%E8%A3%85mysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2020/01/08/Docker%E5%AE%89%E8%A3%85mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-01-08T13:35:31.000Z</published>
    <updated>2020-01-09T03:51:30.700Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Windows10安装Docker&quot;&gt;&lt;a href=&quot;#Windows10安装Docker&quot; class=&quot;headerlink&quot; title=&quot;Windows10安装Docker&quot;&gt;&lt;/a&gt;Windows10安装Docker&lt;/h2&gt;&lt;p&gt;1.打开Docker官网：&lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.docker.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/01/08/Docker%E5%AE%89%E8%A3%85mysql%E6%95%B0%E6%8D%AE%E5%BA%93/pasted-0.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>springBoot(一)：创建springBoot项目</title>
    <link href="http://yoursite.com/2019/12/30/springBoot(%E4%B8%80)%EF%BC%9A%E5%88%9B%E5%BB%BAspringBoot%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/12/30/springBoot(%E4%B8%80)%EF%BC%9A%E5%88%9B%E5%BB%BAspringBoot%E9%A1%B9%E7%9B%AE/</id>
    <published>2019-12-30T09:29:04.000Z</published>
    <updated>2019-12-31T03:14:34.289Z</updated>
    
    <summary type="html">
    
      Spring Boot是构建所有基于Spring的应用程序的起点。Spring Boot旨在通过最少的Spring前期配置使您尽快启动并运行。
    
    </summary>
    
    
      <category term="springBoot" scheme="http://yoursite.com/categories/springBoot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
      <category term="热部署" scheme="http://yoursite.com/tags/%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Junit" scheme="http://yoursite.com/tags/Junit/"/>
    
  </entry>
  
  <entry>
    <title>Mysql的事务管理</title>
    <link href="http://yoursite.com/2019/12/27/Mysql%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2019/12/27/Mysql%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</id>
    <published>2019-12-27T09:34:17.000Z</published>
    <updated>2019-12-27T09:55:32.332Z</updated>
    
    <summary type="html">
    
      事务是逻辑上的一组操作，要求这一组操作要么同时完成 要么同时不完成。
    
    </summary>
    
    
      <category term="Mysql" scheme="http://yoursite.com/categories/Mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="事务" scheme="http://yoursite.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>default关键字</title>
    <link href="http://yoursite.com/2019/12/27/default%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://yoursite.com/2019/12/27/default%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2019-12-27T08:26:52.000Z</published>
    <updated>2019-12-27T09:18:34.073Z</updated>
    
    <summary type="html">
    
      default关键字在Java中主要有两个用法，一个是在switch中执行，另一个是jdk1.8之后使用default关键字在接口中定义普通方法
    
    </summary>
    
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="-java语法" scheme="http://yoursite.com/tags/java%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
