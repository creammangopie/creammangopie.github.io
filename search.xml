<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>default关键字</title>
    <url>/2019/12/27/default%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<p>default关键字在Java中主要有两个用法，一个是在switch中执行，另一个是jdk1.8之后使用default关键字在接口中定义普通方法。</p>
<h1 id="default在Switch中的使用"><a href="#default在Switch中的使用" class="headerlink" title="default在Switch中的使用"></a>default在Switch中的使用</h1><p>default会在case匹配失败后执行</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ch = -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">switch</span>(ch)&#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">0</span> :</span><br><span class="line">              System.out.println(<span class="string">"内容是0"</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line">              System.out.println(<span class="string">"内容是1"</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line">              System.out.println(<span class="string">"内容是2"</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">              System.out.println(<span class="string">"默认值"</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p>打印结果：<code>default</code><br>注：若case中没有break，则匹配成功后会继续执行代码，直到碰到break或return或者switch语句结束为止，这种情况下default可能会执行。</p>
<h1 id="default在接口中的使用（jdk1-8之后）"><a href="#default在接口中的使用（jdk1-8之后）" class="headerlink" title="default在接口中的使用（jdk1.8之后）"></a>default在接口中的使用（jdk1.8之后）</h1><p>在jdk1.8之后，接口中可以使用default定义普通方法。这样如果某些方法对于所有的子类都具有同样的实现，那么可以减少定义。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">getMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        是一个普通方法，jdk1.8之后才有</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="string">"我是接口1的普通方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMss</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是接口1的静态方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageImpl1</span> <span class="keyword">implements</span> <span class="title">IMessage1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        IMessage1 iMessage = <span class="keyword">new</span> MessageImpl1();</span><br><span class="line">        iMessage.print();</span><br><span class="line">        iMessage.getMsg();</span><br><span class="line">        IMessage1.getMss();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：<br><code>MessageImpl1
我是接口1的普通方法
我是接口1的静态方法</code></p>
<h2 id="两个接口中默认方法冲突问题"><a href="#两个接口中默认方法冲突问题" class="headerlink" title="两个接口中默认方法冲突问题"></a>两个接口中默认方法冲突问题</h2><p>当一个类实现了两个接口，而两个接口中都有相同的默认方法，此时会出现什么情况呢？<br>我们再来定义一个新的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">getMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是接口2的普通方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>让一个类同时实现接口1和接口2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageImpl</span> <span class="keyword">implements</span> <span class="title">IMessage1</span> , <span class="title">IMessage2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时编译器会报错<br><img src="https://img-blog.csdnimg.cn/20190804143036881.png" alt="IDEA中方法冲突提示"><br>此时编译器不知道应该从哪个接口中去调用默认方法，所以报错。<br>解决方法：<code>在实现类中重写该方法</code></p>
<h2 id="类与接口中定义了相同的方法"><a href="#类与接口中定义了相同的方法" class="headerlink" title="类与接口中定义了相同的方法"></a>类与接口中定义了相同的方法</h2><p>实现类1实现接口1并重写getMsg()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageImpl1</span> <span class="keyword">implements</span> <span class="title">IMessage1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I'm from MessageImpl1 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现类2继承实现类1并实现接口2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageImpl2</span> <span class="keyword">extends</span> <span class="title">MessageImpl1</span> <span class="keyword">implements</span> <span class="title">IMessage2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若此时在实现类2中调用getMsg()方法，是执行MessageImpl1中的方法还是IMessage2中的呢？<br>执行代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MessageImpl2 messageImpl2 = <span class="keyword">new</span> MessageImpl2();</span><br><span class="line">        messageImpl2.getMsg();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：<code>I&#39;m from MessageImpl1</code><br>答：<strong>类优先级高于接口</strong>，所以执行实现类1中的方法。</p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>-java语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
